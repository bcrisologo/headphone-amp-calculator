{"ast":null,"code":"var _jsxFileName = \"/home/blaise/git-repos/headphone-amp-calculator/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n/*\n// This was a test code\nconst elemental = (\n\t<h1 className=\"greeting\">\n\t Hello There\n\t</h1>\n)\n\n*/\n\nclass Trial extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sensitivity: '',\n      impedance: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    let name = event.target.name;\n    let value = event.target.value; // Checking if values are not numerical\n    // if (!Number(value)) {\n    //\talert(\"Entry must be numerical\");\n    //}\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    let impedance = this.state.impedance;\n    let sensitivity = this.state.sensitivity; // Checks if entries submitted are not numerical\n\n    if (!Number(impedance) && !Number(sensitivity)) {\n      alert(\"Impedance and Sensitivity entries are not numbers\");\n    } else if (!Number(impedance)) {\n      alert(\"Impedance entry is not a number\");\n    } else if (!Number(sensitivity)) {\n      alert(\"Sensitivity entry is not a number\");\n    } else {\n      return;\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 6\n      }\n    }, \" Thanks for coming to the headphone amp page \"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 60\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 6\n      }\n    }, \" Headphone Impedance is \", this.state.impedance, \" \"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 62\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 6\n      }\n    }, \" Headphone Sensitivity is \", this.state.sensitivity, \" \"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 66\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 6\n      }\n    }, \" Impedance: \"), /*#__PURE__*/React.createElement(\"input\", {\n      name: \"impedance\",\n      type: \"text\",\n      id: \"impedance\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 6\n      }\n    }, \" Sensitivity (db SPL / mW): \"), /*#__PURE__*/React.createElement(\"input\", {\n      name: \"sensitivity\",\n      type: \"text\",\n      id: \"sensitivity\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 6\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 6\n      }\n    }));\n  }\n\n} // const impedance = 37;\n\n\nconst sensitivity = 94;\n/* Volume sets at constant\nconst safe_volume = 85;\nconst moderate_volume = 100;\nconst fairlyloud_volume = 110;\nconst veryloud_volume = 115;\nconst painful_volume = 120;\n*/\n\nvar volumes = {\n  safe_volume: 85,\n  moderate_volume: 100,\n  fairlyloud_volume: 110,\n  veryloud_volume: 115,\n  painful_volume: 120\n}; // Base power calculator function\n\nfunction powerCalculation(sensitivity, volume_level) {\n  return 10 ** ((volume_level - sensitivity) / 10);\n} // Printing out volumes array\n\n\nfor (var index in volumes) {\n  //document.write( index + \" : \" + volumes[index] + \" dB SPL\" + \"<br />\");\n  document.write(index + \" : \" + volumes[index] + \" dB SPL\" + \"<br />\");\n} // Printing out calculated power calculations from the volumes array\n\n\ndocument.write(\"<br />\"); // just putting space between\n\nfor (var index in volumes) {\n  document.write(powerCalculation(sensitivity, volumes[index]).toPrecision(3) + \" mW\" + \"<br />\");\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(Trial, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 2\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["/home/blaise/git-repos/headphone-amp-calculator/src/index.js"],"names":["React","ReactDOM","Trial","Component","constructor","props","state","sensitivity","impedance","handleChange","bind","handleSubmit","event","name","target","value","setState","preventDefault","Number","alert","render","volumes","safe_volume","moderate_volume","fairlyloud_volume","veryloud_volume","painful_volume","powerCalculation","volume_level","index","document","write","toPrecision","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\n/*\n// This was a test code\nconst elemental = (\n\t<h1 className=\"greeting\">\n\t Hello There\n\t</h1>\n)\n\n*/\nclass Trial extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { \n\t\t\tsensitivity: '', \n\t\t\timpedance: '',\n\t\t};\n\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t}\n\n\thandleChange(event) {\n\t\tlet name = event.target.name;\n\t\tlet value = event.target.value;\n\n\t\t// Checking if values are not numerical\n\t\t// if (!Number(value)) {\n\t\t//\talert(\"Entry must be numerical\");\n\t\t//}\n\n\t\tthis.setState({\n\t\t\t[name]: value\n\t\t});\n\t}\n\n\thandleSubmit(event) {\n\t\tevent.preventDefault();\n\n\t\tlet impedance = this.state.impedance;\n\t\tlet sensitivity = this.state.sensitivity;\n\n\t\t// Checks if entries submitted are not numerical\n\t\tif(!Number(impedance) && !Number(sensitivity)) {\n\t\t\talert(\"Impedance and Sensitivity entries are not numbers\");\n\t\t}\n\t\t\telse if(!Number(impedance)) {\n\t\t\t\talert(\"Impedance entry is not a number\");\n\t\t\t}\n\t\t\telse if(!Number(sensitivity)) {\n\t\t\t\talert(\"Sensitivity entry is not a number\");\n\t\t\t}\n\t\telse {\n\t\t\treturn;\n\t\t}\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<form onSubmit={this.handleSubmit}>\n\t\t\t  <h1> Thanks for coming to the headphone amp page </h1><br />\n\t\t\t  <h3> Headphone Impedance is {this.state.impedance} </h3><br />\n\t\t\t  <h3> Headphone Sensitivity is {this.state.sensitivity} </h3><br />\n\t\t\t  <p> Impedance: </p>\n\t\t\t  <input\n\t\t\t    name=\"impedance\"\n\t\t\t    type=\"text\"\n\t\t\t    id=\"impedance\"\n\t\t\t    onChange={this.handleChange}\n\t\t\t  />\n\t\t\t  <p> Sensitivity (db SPL / mW): </p>\n\t\t\t  <input\n\t\t\t    name=\"sensitivity\"\n\t\t\t    type=\"text\"\n\t\t\t    id=\"sensitivity\"\n\t\t\t    onChange={this.handleChange}\n\t\t\t  />\n\t\t\t  <br /> <br />\n\t\t\t  <input type=\"submit\" />\n\t\t\t</form>\n\t\t);\n\t}\n}\n\n\n// const impedance = 37;\nconst sensitivity = 94;\n\n/* Volume sets at constant\nconst safe_volume = 85;\nconst moderate_volume = 100;\nconst fairlyloud_volume = 110;\nconst veryloud_volume = 115;\nconst painful_volume = 120;\n*/\n\nvar volumes = {\n\tsafe_volume : 85,\n\tmoderate_volume : 100,\n\tfairlyloud_volume : 110,\n\tveryloud_volume : 115,\n\tpainful_volume : 120\n};\n\n\n// Base power calculator function\nfunction powerCalculation(sensitivity, volume_level) {\n\treturn 10**((volume_level - sensitivity) / 10);\n}\n\n\n// Printing out volumes array\nfor(var index in volumes) {\n\t//document.write( index + \" : \" + volumes[index] + \" dB SPL\" + \"<br />\");\n\tdocument.write(index + \" : \" + volumes[index] + \" dB SPL\" + \"<br />\");\n}\n\n// Printing out calculated power calculations from the volumes array\ndocument.write( \"<br />\")\t\t// just putting space between\nfor(var index in volumes) {\n\tdocument.write( powerCalculation(sensitivity, volumes[index]).toPrecision(3) + \" mW\" + \"<br />\" );\n}\n\n\nReactDOM.render(\n\t<Trial />,\n\tdocument.getElementById('root')\n);"]},"metadata":{},"sourceType":"module"}