{"ast":null,"code":"var _jsxFileName = \"/home/blaise/git-repos/headphone-amp-calculator/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n/*\n// This was a test code\nconst elemental = (\n\t<h1 className=\"greeting\">\n\t Hello There\n\t</h1>\n)\n\n*/\n\nclass Trial extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sensitivity: '',\n      impedance: '',\n      errormessageone: '',\n      errormessagetwo: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    let name = event.target.name;\n    let value = event.target.value;\n    let errone = '';\n    let errtwo = ''; // Displays an error on the side of the input box\n    // when the entry is non-numerical\n\n    if (name === \"impedance\") {\n      if (value != \"\" && !Number(value)) {\n        errone = \"  Impedance must be a number\";\n      }\n    } else {\n      return;\n    }\n\n    if (name === \"sensitivity\") {\n      if (value != \"\" && !Number(value)) {\n        errtwo = \"  Sensitivity must be a number\";\n      }\n    } else {\n      return;\n    }\n\n    this.setState({\n      errormessage: err\n    });\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    let impedance = this.state.impedance;\n    let sensitivity = this.state.sensitivity; // Checks if entries submitted are not numerical\n    // Returns an alert message\n\n    if (impedance != '' && sensitivity != '' && !Number(impedance) && !Number(sensitivity)) {\n      alert(\"Impedance and Sensitivity entries are not numbers\");\n    } else if (impedance != '' && !Number(impedance)) {\n      alert(\"Impedance entry is not a number\");\n    } else if (sensitivity != '' && !Number(sensitivity)) {\n      alert(\"Sensitivity entry is not a number\");\n    } else {\n      return;\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 6\n      }\n    }, \" Thanks for coming to the headphone amp page \"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 60\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 6\n      }\n    }, \" Headphone Impedance is \", this.state.impedance, \" \"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 62\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 6\n      }\n    }, \" Headphone Sensitivity is \", this.state.sensitivity, \" \"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 66\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 6\n      }\n    }, \" Impedance: \"), /*#__PURE__*/React.createElement(\"input\", {\n      name: \"impedance\",\n      type: \"text\",\n      id: \"impedance\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 6\n      }\n    }), this.state.errormessage, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 6\n      }\n    }, \" Sensitivity (db SPL / mW): \"), /*#__PURE__*/React.createElement(\"input\", {\n      name: \"sensitivity\",\n      type: \"text\",\n      id: \"sensitivity\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 6\n      }\n    }), this.state.errormessage, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 6\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Enter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 12\n      }\n    }));\n  }\n\n} // const impedance = 37;\n\n\nconst sensitivity = 94;\n/* Volume sets at constant\nconst safe_volume = 85;\nconst moderate_volume = 100;\nconst fairlyloud_volume = 110;\nconst veryloud_volume = 115;\nconst painful_volume = 120;\n*/\n\nvar volumes = {\n  safe_volume: 85,\n  moderate_volume: 100,\n  fairlyloud_volume: 110,\n  veryloud_volume: 115,\n  painful_volume: 120\n}; // Base power calculator function\n\nfunction powerCalculation(sensitivity, volume_level) {\n  return 10 ** ((volume_level - sensitivity) / 10);\n} // Printing out volumes array\n// for(var index in volumes) {\n//\tdocument.write(index + \" : \" + volumes[index] + \" dB SPL\" + \"<br />\");\n//}\n// Printing out calculated power calculations from the volumes array\n// document.write( \"<br />\")\t\t// just putting space between\n// for(var index in volumes) {\n//\tdocument.write( powerCalculation(sensitivity, volumes[index]).toPrecision(3) + \" mW\" + \"<br />\" );\n//}\n\n\nReactDOM.render( /*#__PURE__*/React.createElement(Trial, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 2\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["/home/blaise/git-repos/headphone-amp-calculator/src/index.js"],"names":["React","ReactDOM","Trial","Component","constructor","props","state","sensitivity","impedance","errormessageone","errormessagetwo","handleChange","bind","handleSubmit","event","name","target","value","errone","errtwo","Number","setState","errormessage","err","preventDefault","alert","render","volumes","safe_volume","moderate_volume","fairlyloud_volume","veryloud_volume","painful_volume","powerCalculation","volume_level","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\n/*\n// This was a test code\nconst elemental = (\n\t<h1 className=\"greeting\">\n\t Hello There\n\t</h1>\n)\n\n*/\nclass Trial extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { \n\t\t\tsensitivity: '', \n\t\t\timpedance: '',\n\t\t\terrormessageone: '',\n\t\t\terrormessagetwo: ''\n\t\t};\n\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t}\n\n\thandleChange(event) {\n\t\tlet name = event.target.name;\n\t\tlet value = event.target.value;\n\n\t\tlet errone = '';\n\t\tlet errtwo = '';\n\n\t\t// Displays an error on the side of the input box\n\t\t// when the entry is non-numerical\n\t\tif(name === \"impedance\") {\n\t\t\tif(value != \"\" && !Number(value)) {\n\t\t\t\terrone = \"  Impedance must be a number\";\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn\n\t\t}\n\n\t\tif(name === \"sensitivity\") {\n\t\t\tif(value != \"\" && !Number(value)) {\n\t\t\t\terrtwo = \"  Sensitivity must be a number\";\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn\n\t\t}\n\t\t\n\n\t\tthis.setState({\n\t\t\terrormessage: err\n\t\t});\n\n\t\tthis.setState({\n\t\t\t[name]: value\n\t\t});\n\t}\n\n\thandleSubmit(event) {\n\t\tevent.preventDefault();\n\n\t\tlet impedance = this.state.impedance;\n\t\tlet sensitivity = this.state.sensitivity;\n\n\t\t// Checks if entries submitted are not numerical\n\t\t// Returns an alert message\n\t\tif(impedance != '' && sensitivity != '' && \n\t\t\t!Number(impedance) && !Number(sensitivity)) {\n\t\t\talert(\"Impedance and Sensitivity entries are not numbers\");\n\t\t}\n\t\t\telse if(impedance != '' && !Number(impedance)) {\n\t\t\t\talert(\"Impedance entry is not a number\");\n\t\t\t}\n\t\t\telse if(sensitivity != '' && !Number(sensitivity)) {\n\t\t\t\talert(\"Sensitivity entry is not a number\");\n\t\t\t}\n\t\telse {\n\t\t\treturn;\n\t\t}\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<form onSubmit={this.handleSubmit}>\n\t\t\t  <h1> Thanks for coming to the headphone amp page </h1><br />\n\t\t\t  <h3> Headphone Impedance is {this.state.impedance} </h3><br />\n\t\t\t  <h3> Headphone Sensitivity is {this.state.sensitivity} </h3><br />\n\t\t\t  <p> Impedance: </p>\n\t\t\t  <input\n\t\t\t    name=\"impedance\"\n\t\t\t    type=\"text\"\n\t\t\t    id=\"impedance\"\n\t\t\t    onChange={this.handleChange}\n\t\t\t  />\n\t\t\t  {this.state.errormessage}\n\t\t\t  <p> Sensitivity (db SPL / mW): </p>\n\t\t\t  <input\n\t\t\t    name=\"sensitivity\"\n\t\t\t    type=\"text\"\n\t\t\t    id=\"sensitivity\"\n\t\t\t    onChange={this.handleChange}\n\t\t\t  />\n\t\t\t  {this.state.errormessage}\n\t\t\t  <br /> <br />\n\t\t\t  <input \n\t\t\t    type=\"submit\" \n\t\t\t    value=\"Enter\"\n\t\t\t  />\n\t\t\t  <br /><br />\n\t\t\t</form>\n\t\t);\n\t}\n}\n\n\n// const impedance = 37;\nconst sensitivity = 94;\n\n/* Volume sets at constant\nconst safe_volume = 85;\nconst moderate_volume = 100;\nconst fairlyloud_volume = 110;\nconst veryloud_volume = 115;\nconst painful_volume = 120;\n*/\n\nvar volumes = {\n\tsafe_volume : 85,\n\tmoderate_volume : 100,\n\tfairlyloud_volume : 110,\n\tveryloud_volume : 115,\n\tpainful_volume : 120\n};\n\n\n// Base power calculator function\nfunction powerCalculation(sensitivity, volume_level) {\n\treturn 10**((volume_level - sensitivity) / 10);\n}\n\n\n// Printing out volumes array\n// for(var index in volumes) {\n//\tdocument.write(index + \" : \" + volumes[index] + \" dB SPL\" + \"<br />\");\n//}\n\n// Printing out calculated power calculations from the volumes array\n// document.write( \"<br />\")\t\t// just putting space between\n// for(var index in volumes) {\n//\tdocument.write( powerCalculation(sensitivity, volumes[index]).toPrecision(3) + \" mW\" + \"<br />\" );\n//}\n\n\nReactDOM.render(\n\t<Trial />,\n\tdocument.getElementById('root')\n);"]},"metadata":{},"sourceType":"module"}