{"ast":null,"code":"var _jsxFileName = \"/home/blaise/git-repos/headphone-amp-calculator/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; // Array for target volumes in dB SPL\n\nconst volumes = {\n  safe_volume: 85,\n  moderate_volume: 100,\n  fairlyloud_volume: 110,\n  veryloud_volume: 115,\n  painful_volume: 120\n};\nconst {\n  safe_volume,\n  moderate_volume,\n  fairlyloud_volume,\n  veryloud_volume,\n  painful_volume\n} = volumes; // Base power calculator function\n\nfunction powerCalculation(sensitivity, volume_level) {\n  return 10 ** ((volume_level - sensitivity) / 10);\n}\n\nclass Trial extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sensitivity: '',\n      impedance: '',\n      powerresults: '',\n      errormessageone: '',\n      errormessagetwo: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  } // powerCalculation(sensitivity, volume_level) {\n  // \treturn 10**((volume_level - sensitivity) / 10);\n  // }\n\n\n  handleChange(event) {\n    //let name = event.target.name;\n    //let value = event.target.value;\n    // Logging purposes\n    console.log(event);\n    console.log(event.target.name);\n    console.log(event.target.value);\n    let {\n      value,\n      name\n    } = event.target;\n    let {\n      errone,\n      errtwo\n    } = ''; // Displays an error on the side of the input box\n    // when the entry is non-numerical\n    // *** Can use ? operator when optimizing the IF statements\n\n    if (name === \"impedance\") {\n      if (value !== \"\" && !Number(value)) {\n        // Displays error for Impedance\n        errone = \"  Impedance must be a number\";\n      }\n    }\n\n    if (name === \"sensitivity\") {\n      if (value !== \"\" && !Number(value)) {\n        // Displays error for Sensitivity\n        errtwo = \"  Sensitivity must be a number\";\n      }\n    }\n\n    this.setState({\n      [name]: value,\n      errormessageone: errone,\n      errormessagetwo: errtwo\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault(); // Assigning the local variables to input\n\n    let impedance = this.state.impedance;\n    let sensitivity = this.state.sensitivity;\n    const data = this.state;\n    console.log(data); // Checks if entries submitted are not numerical\n    // Returns an alert message\n    // Can use ? operator when optimizing\n\n    if (impedance !== '' && sensitivity !== '' && !Number(impedance) && !Number(sensitivity)) {\n      // Both entries are non-numbers\n      alert(\"Impedance and Sensitivity entries are not numbers\");\n    } else if (impedance !== '' && !Number(impedance)) {\n      // Impedance is not a number\n      alert(\"Impedance entry is not a number\");\n    } else if (sensitivity !== '' && !Number(sensitivity)) {\n      // Sensitivity is not a number\n      alert(\"Sensitivity entry is not a number\");\n    } else if (impedance === '' && sensitivity === '') {\n      // Empty field\n      // const powerresults = (<h3>powerCalculation(impedance, volumes.safe_volume)</h3>);\n      return;\n    } // Need to include continuing function here\n    // alert(powerCalculation(this.state.sensitivity, volumes.safe_volume).toPrecision(2) + ' mW');\n\n\n    this.setState(state => ({\n      impedance: this.state.impedance,\n      sensitivity: this.state.sensitivity,\n      powerresults: powerCalculation(impedance, volumes.safe_volume)\n    }));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"initialpage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 6\n      }\n    }, \" Thanks for coming to the headphone amp calculator page \"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 71\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 6\n      }\n    }, \" Headphone Impedance is \", this.state.impedance, \" \"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 62\n      }\n    }), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 6\n      }\n    }, \" Headphone Sensitivity is \", this.state.sensitivity, \" \"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 66\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 6\n      }\n    }, \" Impedance (Ohms): \"), /*#__PURE__*/React.createElement(\"input\", {\n      name: \"impedance\",\n      className: \"impedance\",\n      type: \"text\",\n      placeholder: \"Impedance\",\n      onChange: this.handleChange,\n      value: this.state.impedance,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 6\n      }\n    }), this.state.errormessageone, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 6\n      }\n    }, \" Sensitivity (db SPL / mW): \"), /*#__PURE__*/React.createElement(\"input\", {\n      name: \"sensitivity\",\n      className: \"sensitivity\",\n      type: \"text\",\n      placeholder: \"Sensitivity\",\n      onChange: this.handleChange,\n      value: this.state.sensitivity,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 6\n      }\n    }), this.state.errormessagetwo, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 6\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 6\n      }\n    }, \"Calculate\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 6\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 12\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 6\n      }\n    }, /*#__PURE__*/React.createElement(PowerOutput, {\n      sensitivity: this.state.sensitivity,\n      impedance: this.state.impedance,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 8\n      }\n    })));\n  }\n\n}\n\nclass PowerOutput extends React.Component {\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"powerresults\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 4\n      }\n    }, \"This is rendered by PowerOutput class\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 4\n      }\n    }, \"The impedance is \", this.props.impedance), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 4\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 4\n      }\n    }, \"The sensitivity is \", this.props.sensitivity), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 4\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 4\n      }\n    }, \"The power result is \", this.props.powerresults));\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/React.createElement(Trial, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 2\n  }\n}), document.getElementById('root'));\n/* Volume sets at constant\nconst safe_volume = 85;\nconst moderate_volume = 100;\nconst fairlyloud_volume = 110;\nconst veryloud_volume = 115;\nconst painful_volume = 120;\n*/\n// Printing out volumes array\n// for(var index in volumes) {\n//\tdocument.write(index + \" : \" + volumes[index] + \" dB SPL\" + \"<br />\");\n//}\n// Printing out calculated power calculations from the volumes array\n// document.write( \"<br />\")\t\t// just putting space between\n// for(var index in volumes) {\n//\tdocument.write( powerCalculation(sensitivity, volumes[index]).toPrecision(3) + \" mW\" + \"<br />\" );\n//}","map":{"version":3,"sources":["/home/blaise/git-repos/headphone-amp-calculator/src/index.js"],"names":["React","ReactDOM","volumes","safe_volume","moderate_volume","fairlyloud_volume","veryloud_volume","painful_volume","powerCalculation","sensitivity","volume_level","Trial","Component","constructor","props","state","impedance","powerresults","errormessageone","errormessagetwo","handleChange","bind","handleSubmit","event","console","log","target","name","value","errone","errtwo","Number","setState","preventDefault","data","alert","render","PowerOutput","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\n// Array for target volumes in dB SPL\nconst volumes = {\n\tsafe_volume: 85,\n\tmoderate_volume: 100,\n\tfairlyloud_volume: 110,\n\tveryloud_volume: 115,\n\tpainful_volume: 120\n};\nconst { safe_volume, moderate_volume, fairlyloud_volume, veryloud_volume, painful_volume } = volumes;\n\n// Base power calculator function\nfunction powerCalculation(sensitivity, volume_level) {\n\treturn 10**((volume_level - sensitivity) / 10)\n}\n\n\nclass Trial extends React.Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = { \n\t\t\tsensitivity: '', \n\t\t\timpedance: '',\n\t\t\tpowerresults: '',\n\t\t\terrormessageone: '',\n\t\t\terrormessagetwo: '',\n\t\t};\n\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t\tthis.handleSubmit = this.handleSubmit.bind(this);\n\t}\n\n\t// powerCalculation(sensitivity, volume_level) {\n\t// \treturn 10**((volume_level - sensitivity) / 10);\n\t// }\n\n\thandleChange(event) {\n\t\t//let name = event.target.name;\n\t\t//let value = event.target.value;\n\n\t\t// Logging purposes\n\t\tconsole.log(event)\n\t\tconsole.log(event.target.name)\n\t\tconsole.log(event.target.value)\n\n\t\tlet {value, name} = event.target;\n\t\tlet {errone, errtwo} = '';\n\n\t\t// Displays an error on the side of the input box\n\t\t// when the entry is non-numerical\n\t\t// *** Can use ? operator when optimizing the IF statements\n\t\tif(name === \"impedance\") {\n\t\t\tif(value !== \"\" && !Number(value)) {\n\t\t\t\t// Displays error for Impedance\n\t\t\t\terrone = \"  Impedance must be a number\";\n\t\t\t}\n\t\t}\n\t\tif(name === \"sensitivity\") {\n\t\t\tif(value !== \"\" && !Number(value)) {\n\t\t\t\t// Displays error for Sensitivity\n\t\t\t\terrtwo = \"  Sensitivity must be a number\";\n\t\t\t}\n\t\t}\t\n\n\t\tthis.setState({\n\t\t\t[name]: value,\n\t\t\terrormessageone: errone,\n\t\t\terrormessagetwo: errtwo\n\t\t});\n\t}\n\n\thandleSubmit(event) {\n\t\tevent.preventDefault();\n\n\t\t// Assigning the local variables to input\n\t\tlet impedance = this.state.impedance;\n\t\tlet sensitivity = this.state.sensitivity;\n\n\t\tconst data = this.state;\n\t\tconsole.log(data)\n\n\t\t// Checks if entries submitted are not numerical\n\t\t// Returns an alert message\n\t\t// Can use ? operator when optimizing\n\t\tif(impedance !== '' && sensitivity !== '' && \n\t\t\t!Number(impedance) && !Number(sensitivity)) {\n\t\t\t// Both entries are non-numbers\n\t\t\talert(\"Impedance and Sensitivity entries are not numbers\");\n\t\t}\n\t\t\telse if(impedance !== '' && !Number(impedance)) {\n\t\t\t\t// Impedance is not a number\n\t\t\t\talert(\"Impedance entry is not a number\");\n\t\t\t}\n\t\t\telse if(sensitivity !== '' && !Number(sensitivity)) {\n\t\t\t\t// Sensitivity is not a number\n\t\t\t\talert(\"Sensitivity entry is not a number\");\n\t\t\t}\n\t\t\telse if(impedance === '' && sensitivity === '') {\n\t\t\t\t// Empty field\n\t\t\t\t// const powerresults = (<h3>powerCalculation(impedance, volumes.safe_volume)</h3>);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\n\t\t// Need to include continuing function here\n\t\t// alert(powerCalculation(this.state.sensitivity, volumes.safe_volume).toPrecision(2) + ' mW');\n\t\tthis.setState(state => ({\n\t\t\timpedance: this.state.impedance,\n\t\t\tsensitivity: this.state.sensitivity,\n\t\t\tpowerresults: powerCalculation(impedance, volumes.safe_volume)\n\t\t}));\n\t}\n\n\trender(){\n\t\treturn (\n\t\t\t<div className=\"initialpage\">\n\t\t\t<form onSubmit={this.handleSubmit}>\n\t\t\t  <h1> Thanks for coming to the headphone amp calculator page </h1><br />\n\t\t\t  <h3> Headphone Impedance is {this.state.impedance} </h3><br />\n\t\t\t  <h3> Headphone Sensitivity is {this.state.sensitivity} </h3><br />\n\t\t\t  <p> Impedance (Ohms): </p>\n\t\t\t  <input\n\t\t\t  \tname=\"impedance\"\n\t\t\t    className=\"impedance\"\n\t\t\t    type=\"text\"\n\t\t\t    placeholder=\"Impedance\"\n\t\t\t    onChange={this.handleChange}\n   \t\t\t    value={this.state.impedance}\n\t\t\t  />\n\t\t\t  {this.state.errormessageone}\n\t\t\t  <p> Sensitivity (db SPL / mW): </p>\n\t\t\t  <input\n\t\t\t  \tname=\"sensitivity\"\n\t\t\t    className=\"sensitivity\"\n\t\t\t    type=\"text\"\n\t\t\t    placeholder=\"Sensitivity\"\n\t\t\t    onChange={this.handleChange}\n\t\t\t    value={this.state.sensitivity}\n\t\t\t  />\n\t\t\t  {this.state.errormessagetwo}\n\t\t\t  <br /> <br />\n\t\t\t  <button \n\t\t\t    type=\"submit\"\n\t\t\t    className=\"submit\"\n\t\t\t    >Calculate\n\t\t\t  </button>\n\t\t\t  <br /><br />\n\t\t\t</form>\n\t\t\t  <div>\n\t\t\t    <PowerOutput \n\t\t\t      sensitivity={this.state.sensitivity} \n\t\t\t      impedance={this.state.impedance}\n\t\t\t      />\n\t\t\t  </div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nclass PowerOutput extends React.Component {\n\n\trender() {\n\t\treturn(\n\t\t\t<div className=\"powerresults\">\n\t\t\t<h3>This is rendered by PowerOutput class</h3>\n\t\t\t<p>The impedance is {this.props.impedance}</p>\n\t\t\t<br />\n\t\t\t<p>The sensitivity is {this.props.sensitivity}</p>\n\t\t\t<br />\n\t\t\t<p>The power result is {this.props.powerresults}</p>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nReactDOM.render(\n\t<Trial />,\n\tdocument.getElementById('root')\n);\n\n/* Volume sets at constant\nconst safe_volume = 85;\nconst moderate_volume = 100;\nconst fairlyloud_volume = 110;\nconst veryloud_volume = 115;\nconst painful_volume = 120;\n*/\n\n// Printing out volumes array\n// for(var index in volumes) {\n//\tdocument.write(index + \" : \" + volumes[index] + \" dB SPL\" + \"<br />\");\n//}\n\n// Printing out calculated power calculations from the volumes array\n// document.write( \"<br />\")\t\t// just putting space between\n// for(var index in volumes) {\n//\tdocument.write( powerCalculation(sensitivity, volumes[index]).toPrecision(3) + \" mW\" + \"<br />\" );\n//}"]},"metadata":{},"sourceType":"module"}